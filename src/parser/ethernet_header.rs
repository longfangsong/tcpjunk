use std::convert::TryInto;

use nom::bytes::complete::take;
use nom::combinator::map;
use nom::IResult;
use nom::sequence::tuple;
use serde::{Deserialize, Serialize};

use crate::parser::packet_type::PACKET_TYPES;
use crate::parser::packet_type::PacketType;

#[derive(Serialize, Deserialize, Debug)]
pub struct EthernetHeader {
    source: [u8; 6],
    destination: [u8; 6],
    content_type: PacketType,
}

impl std::fmt::Display for EthernetHeader {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Packet from {} to {}, type is {}",
               self.source[..]
                   .iter()
                   .map(|it| format!("{:02x}", it))
                   .collect::<Vec<_>>()
                   .join(":"),
               self.destination[..]
                   .iter()
                   .map(|it| format!("{:02x}", it))
                   .collect::<Vec<_>>()
                   .join(":"),
               self.content_type
        )
    }
}

pub fn ethernet_header(input: &[u8]) -> IResult<&[u8], EthernetHeader> {
    map(tuple((
        take(6usize),
        take(6usize),
        take(2usize),
    )), |(target, source, content_type): (&[u8], &[u8], &[u8])| {
        let content_type: u16 = ((content_type[0] as u16) << 8) | (content_type[1] as u16);
        EthernetHeader {
            source: source.try_into().expect("slice with incorrect length"),
            destination: target.try_into().expect("slice with incorrect length"),
            content_type: PACKET_TYPES
                .get(&content_type)
                .unwrap()
                .to_owned(),
        }
    })(input)
}

#[test]
fn ethernet_header_test() {
    let source: [u8; 54] = [
        0xb8, 0xe8, 0x56, 0x41, 0x95, 0xf0,
        0x14, 0x6b, 0x9c, 0xf3, 0xde, 0xa0,
        0x08, 0x00,
        0x45, 0x00, 0x00, 0x28, 0x44, 0xfa, 0x40, 0x00, 0x2a, 0x06, 0xbc, 0x78, 0xb6, 0x3d, 0xc8, 0x0b, 0xc0, 0xa8
        , 0x10, 0x6c, 0x01, 0xbb, 0xf1, 0xbe, 0x37, 0x8c, 0x0c, 0x60, 0x5b, 0x57, 0xe9, 0xbf, 0x50, 0x11
        , 0x04, 0x6c, 0xdf, 0x8c, 0x00, 0x00];
    let result = ethernet_header(&source);
    assert_eq!(format!("{}", result.unwrap().1), "Packet from 14:6b:9c:f3:de:a0 to b8:e8:56:41:95:f0, type is IPV4".to_string());
    let source: [u8; 208] = [0x33, 0x33, 0x00, 0x00, 0x00, 0x0c, 0xd8, 0xcb, 0x8a, 0x12, 0x6f, 0x2a, 0x86, 0xdd, 0x60, 0x00
        , 0x00, 0x00, 0x00, 0x9a, 0x11, 0x01, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x86
        , 0xa7, 0x7a, 0xcc, 0xd9, 0x08, 0x3f, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xd7, 0x48, 0x07, 0x6c, 0x00, 0x9a, 0x76, 0xfc, 0x4d, 0x2d
        , 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e
        , 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x5b, 0x46, 0x46, 0x30, 0x32, 0x3a, 0x3a, 0x43
        , 0x5d, 0x3a, 0x31, 0x39, 0x30, 0x30, 0x0d, 0x0a, 0x53, 0x54, 0x3a, 0x75, 0x72, 0x6e, 0x3a, 0x4d
        , 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73
        , 0x20, 0x50, 0x65, 0x65, 0x72, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x6c
        , 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x20
        , 0x56, 0x34, 0x3a, 0x49, 0x50, 0x56, 0x36, 0x3a, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61
        , 0x6c, 0x0d, 0x0a, 0x4d, 0x61, 0x6e, 0x3a, 0x22, 0x73, 0x73, 0x64, 0x70, 0x3a, 0x64, 0x69, 0x73
        , 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x4d, 0x58, 0x3a, 0x33, 0x0d, 0x0a, 0x0d, 0x0a
    ];
    let result = ethernet_header(&source);
    let r = result.unwrap().1;
    assert_eq!(format!("{}", r), "Packet from d8:cb:8a:12:6f:2a to 33:33:00:00:00:0c, type is IPV6".to_string());
    println!("{:?}", serde_json::to_string(&r).unwrap());
}